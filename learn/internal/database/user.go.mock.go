// Code generated by MockGen. DO NOT EDIT.
// Source: user.go
//
// Generated by this command:
//
//	mockgen -source=user.go -destination=user.go.mock.go -package=database
//

// Package database is a generated GoMock package.
package database

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockUserDataAccessor is a mock of UserDataAccessor interface.
type MockUserDataAccessor struct {
	ctrl     *gomock.Controller
	recorder *MockUserDataAccessorMockRecorder
	isgomock struct{}
}

// MockUserDataAccessorMockRecorder is the mock recorder for MockUserDataAccessor.
type MockUserDataAccessorMockRecorder struct {
	mock *MockUserDataAccessor
}

// NewMockUserDataAccessor creates a new mock instance.
func NewMockUserDataAccessor(ctrl *gomock.Controller) *MockUserDataAccessor {
	mock := &MockUserDataAccessor{ctrl: ctrl}
	mock.recorder = &MockUserDataAccessorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserDataAccessor) EXPECT() *MockUserDataAccessorMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockUserDataAccessor) CreateUser(ctx context.Context, user User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockUserDataAccessorMockRecorder) CreateUser(ctx, user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockUserDataAccessor)(nil).CreateUser), ctx, user)
}

// DeleteUser mocks base method.
func (m *MockUserDataAccessor) DeleteUser(ctx context.Context, id uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockUserDataAccessorMockRecorder) DeleteUser(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockUserDataAccessor)(nil).DeleteUser), ctx, id)
}

// GetUser mocks base method.
func (m *MockUserDataAccessor) GetUser(ctx context.Context, id uint64) (User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", ctx, id)
	ret0, _ := ret[0].(User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockUserDataAccessorMockRecorder) GetUser(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockUserDataAccessor)(nil).GetUser), ctx, id)
}

// UpdateUser mocks base method.
func (m *MockUserDataAccessor) UpdateUser(ctx context.Context, user User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", ctx, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockUserDataAccessorMockRecorder) UpdateUser(ctx, user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockUserDataAccessor)(nil).UpdateUser), ctx, user)
}
